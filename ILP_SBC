#!/bin/bash
# Get the files names
source ./src/file_names.py

RunParser()
{
	if [[ ! -d  $1$S ]] 
		then 
			echo "Define directory "$S" in "$1""
			exit 1
	fi
	for enc in $1$S*
    do
		filename=$(basename -- "$enc")
		id="${filename%.*}"
		echo "Generate examples from $filename ..." 
		# Produce smodels input (without repetitions)
		gringo --output=smodels $1$ASP_FILE_NAME $enc $1$ACTIVE_BK  |  python ./src/remove.py > $1$SMODELS_FILE
		# Call SBASS and find the non symmetric assignments
		./src/SBASS/sbass --show < $1$SMODELS_FILE >  $1$SBASS_OUTPUT 2> $1$GENERATORS_FILE
		if [[ ! -s $1/$GENERATORS_FILE ]]
		then 
			echo "	No symmetries to exploit"
			echo
		elif [[ ! $(head -c1 $1$GENERATORS_FILE) == \(* ]]; then
			echo "Error:" | cat $1$GENERATORS_FILE
			exit 1
		fi
		# Compute all the answer sets (without symmetry breaking constraints)
		clingo $1$ASP_FILE_NAME $1$ACTIVE_BK $enc 0  > $1$ALL_AS_FILE
		# Call the parser if some non-symmetric assignments exist
		python ./src/parser.py $1 $id $2
	done
}


ExtendActiveBK()
{
	if [[ ! -f  $1$NEG_EXAMPLES_FILE ]] || [[ ! -f  $1$POS_EXAMPLES_FILE ]]
		then 
			echo "Error: define positive and negative examples"
			echo "Call $0 -d $1 for default mode"
			echo "     $0 -s $1 for satisfiable mode"
			exit 1
	fi
	if [[ ! -f  $1$DEFAULT_EXAMPLES ]]
		then 
			echo "Error: define general positive examples"
			echo "Call $0 -g $1"
			exit 1
	fi
	if [[ $2 == "-s" ]] # shuffle arg
	then 
		shuf -o $1$NEG_EXAMPLES_FILE < $1$NEG_EXAMPLES_FILE
		shuf -o $1$POS_EXAMPLES_FILE < $1$POS_EXAMPLES_FILE
	fi
	cat $1$ILASP_NO_EX $1$ACTIVE_BK $1$POS_EXAMPLES_FILE $1$DEFAULT_EXAMPLES $1$NEG_EXAMPLES_FILE  > $1$ILASP_INPUT
	dos2unix $1$ILASP_INPUT 2> /dev/null
	result=$(./src/ILASP4/ILASP --version=4 -d $1$ILASP_INPUT | tee /dev/tty)
	lastLines=${result##*%% Final Hypothesis:} 
	learnt=${lastLines%\%\% Pre-processing*}
	temp="${learnt//%}"
	learnt=$(echo $temp | tr ";" "," | sed '/^[[:space:]]*$/d')
	# If some new rules are learnt, ask to extend the active background knowledge
	while [[ -n ${learnt} ]] && [[ ${result}  != *"UNSATISFIABLE"* ]]; do
		read -p "Do you wish to update the active background knowledge? " yn
		case $yn in
			[Yy]* )  echo ${learnt}  | sed -r 's/:-/\n:-/g' >> $1$ACTIVE_BK; break;;
			[Nn]* ) exit;;
			* ) echo "Please answer yes or no.";;
		esac
	done
}

Help()
{	
	echo "  Lift symmetry breaking constraints on ASP programs using Inductive Logic Programming."
	echo 
	echo "  Usage: "
	echo "  	 $0 [<command>] [<directory>]"
	echo 
	echo  "  Command Options:"
	echo "	 -h  | --help			: Print help and exit"
	echo "	 -c  | --clean  		: Clean directory from temp files"
	echo "	 -g  | --general_examples	: Create the general positive examples"
	echo "	 -s  | --ex_from_S_sat		: Generate positive and negative examples (satisfiable mode)"
	echo "	 -d  | --ex_from_S_def		: Generate positive and negative examples (default mode)"
	echo "	 -i  | --runIlasp		: Run ILASP "
	echo "	 -is | --runIlaspShuff		: Run ILASP over shuffled examples"
	echo "	 -a  | --runAll			: $0 -g; $0 -s; $0 -i; $0 -c"
	echo 
	echo "  Directory with problem data. It should contain:"
	echo "	 $GEN  			: Directory containing representative problem instances"
	echo "	 $S  				: Directory containing small problem instances"
	echo "	 $ASP_FILE_NAME			: ASP file containing the input program from which extract symmetries"
	echo "	 $ACTIVE_BK 			: ASP file with learnt rules"
	echo "	 $ILASP_NO_EX	: ILASP file with background knowledge and the language bias"
	echo  
}

if [[ $# -eq 0 ]] || [[ $1 == "-h" ]] || [[ $1 == "--help" ]]; then
	Help
	exit 0
fi

if [ ! $# -eq 2 ];
then 
	echo "Specify command and directory with problem data"
	exit 1
fi
command=$1
D=$2

if [[ ! -d $D  ]] 
then 
	echo "Directory "$D" doesn't exists"
	exit 1
fi

case $command in 
	--general_examples|-g)
	rm -f $D$DEFAULT_EXAMPLES
	if [[ ! -d  $D$GEN ]] 
		then 
			echo "Define directory "$GEN" in "$D""
			exit 1
	fi
	for enc in $D$GEN/*
    do
		filename=$(basename -- "$enc")
		id="${filename%.*}"
		id=$(echo $id | cut -d'-' -f 2)
		echo "#pos(id0def_$id,{},{},{$(cat $enc)})." >> $D$DEFAULT_EXAMPLES
	done
	;;
	--ex_from_S_def|-d)
	rm -f $D$NEG_EXAMPLES_FILE $D$POS_EXAMPLES_FILE
    RunParser $D Def
	;;
	--ex_from_S_sat|-s)
	rm -f $D$NEG_EXAMPLES_FILE $D$POS_EXAMPLES_FILE
    RunParser $D Sat
	;;
	--runIlasp|-i)
	ExtendActiveBK $D
	;; 
	--runIlaspShuff|-is)
	ExtendActiveBK $D -s
	;; 
	--clean|-c)
	rm -f $D$SMODELS_FILE $D$GENERATORS_FILE $D$ALL_AS_FILE $D$TEMP_ASP_ALL_SYM \
	$D$OUT_SYM_FILE $D$OUT_GENERATORS_FILE $D$SBASS_OUTPUT $D$TEMP_EXAMPLES_FILE \
	$D$POS_EXAMPLES_FILE $D$NEG_EXAMPLES_FILE $D$ILASP_INPUT $D$DEFAULT_EXAMPLES \
	$D$PERMUTATION_RANGE
	;; 
	--runAll|-a)
	$0 -g $D 
	$0 -s $D 
	$0 -i $D 
	$0 -c $D 
	;;
	*)
	echo "Invalid input"
	Help
	exit 1
esac




